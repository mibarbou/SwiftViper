//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created ___FULLUSERNAME___ on ___DATE___.
//  Copyright Â© ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/cvillaseca/SwiftViper
//

import Foundation
import Swinject

class ___FILEBASENAMEASIDENTIFIER___Container: AssemblyType {
    
    func assemble(container: Container) {
        container.register(___FILEBASENAMEASIDENTIFIER___InteractorInputProtocol.self) { _ in
            ___FILEBASENAMEASIDENTIFIER___Interactor()
        }
        
        container.register(___FILEBASENAMEASIDENTIFIER___RouterInputProtocol.self) { (r, controller:___FILEBASENAMEASIDENTIFIER___Controller) in
            let router = ___FILEBASENAMEASIDENTIFIER___Router()
            router.controller = controller
            return router
        }
        
        container.register(___FILEBASENAMEASIDENTIFIER___PresenterProtocol.self) { (r, controller:___FILEBASENAMEASIDENTIFIER___Controller) in
            let interactor = r.resolve(___FILEBASENAMEASIDENTIFIER___InteractorInputProtocol.self)!
            let router = r.resolve(___FILEBASENAMEASIDENTIFIER___RouterInputProtocol.self, argument: controller)!
            let interface = controller as ___FILEBASENAMEASIDENTIFIER___InterfaceProtocol
            return ___FILEBASENAMEASIDENTIFIER___Presenter(interface: interface, interactor: interactor, router: router)
        }
        
        container.register(___FILEBASENAMEASIDENTIFIER___Controller.self) {  r in
            let controller = UIStoryboard.main().instantiateViewController() as ___FILEBASENAMEASIDENTIFIER___Controller
            let presenter = r.resolve(___FILEBASENAMEASIDENTIFIER___PresenterProtocol.self, argument: controller)!
            controller.presenter = presenter
            
            return controller
        }

    }
    
}
